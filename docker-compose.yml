version: '3.3'

services:
  web:
    build: .
    command: >
      sh -c "gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/usr/src/app/
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
    # env_file:
    #   - .env
    ports:
      - "8000:8000"
    depends_on:
      - migration
      - redis
    container_name: my_web
    # restart: on-failure
    networks:
      - backend

  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: meder
      POSTGRES_PASSWORD: 1
      POSTGRES_DB: final_db
    container_name: db_dev_2
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
  
  migration:
    build: .
    restart: on-failure
    command: >
      sh -c "python3 manage.py makemigrations &&
              python3 manage.py migrate"
    volumes: 
      - .:/usr/src/app/
    depends_on:
      - db
    networks:
      - backend

  celery:
    build: .
    command: celery -A config worker
    volumes: 
      - .:/usr/src/app/
    depends_on:
      - web
      - redis
    networks:
      - backend

  redis:
    image: redis
    ports:
      - "6379:6379"
    networks:
      - backend

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
    volumes:
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
    depends_on:
      - web
    networks:
      - backend

  bot: 
    build: 
      context: . 
      dockerfile: bot/Dockerfile
    volumes:
      - .:/usr/src/app/
    depends_on:
      - web
    environment: 
      - BOT_TOKEN=${BOT_TOKEN}


volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  backend:
